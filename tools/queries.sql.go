// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package tools

import (
	"context"
	"database/sql"
)

const categoryIDGetCollections = `-- name: CategoryIDGetCollections :exec
SELECT name, id FROM collections
INNER JOIN image_collections AS link ON
    link.collection_id = collections.id WHERE link.photo_id=?
`

func (q *Queries) CategoryIDGetCollections(ctx context.Context, photoID int64) error {
	_, err := q.db.ExecContext(ctx, categoryIDGetCollections, photoID)
	return err
}

const clearCategoryCollections = `-- name: ClearCategoryCollections :exec
DELETE FROM category_collection
WHERE category_id=?
`

func (q *Queries) ClearCategoryCollections(ctx context.Context, categoryID int64) error {
	_, err := q.db.ExecContext(ctx, clearCategoryCollections, categoryID)
	return err
}

const clearCollectionCategories = `-- name: ClearCollectionCategories :exec
DELETE FROM category_collection
WHERE collection_id=?
`

func (q *Queries) ClearCollectionCategories(ctx context.Context, collectionID int64) error {
	_, err := q.db.ExecContext(ctx, clearCollectionCategories, collectionID)
	return err
}

const clearCollectionsPhotos = `-- name: ClearCollectionsPhotos :exec
DELETE FROM image_collections 
WHERE collection_id=?
`

func (q *Queries) ClearCollectionsPhotos(ctx context.Context, collectionID int64) error {
	_, err := q.db.ExecContext(ctx, clearCollectionsPhotos, collectionID)
	return err
}

const clearPhotoCollections = `-- name: ClearPhotoCollections :exec
DELETE FROM image_collections WHERE photo_id=?
`

func (q *Queries) ClearPhotoCollections(ctx context.Context, photoID int64) error {
	_, err := q.db.ExecContext(ctx, clearPhotoCollections, photoID)
	return err
}

const collectionIntoCategory = `-- name: CollectionIntoCategory :exec
INSERT INTO category_collection (category_id, collection_id) VALUES (?,?)
`

type CollectionIntoCategoryParams struct {
	CategoryID   int64
	CollectionID int64
}

func (q *Queries) CollectionIntoCategory(ctx context.Context, arg CollectionIntoCategoryParams) error {
	_, err := q.db.ExecContext(ctx, collectionIntoCategory, arg.CategoryID, arg.CollectionID)
	return err
}

const createCategory = `-- name: CreateCategory :one

INSERT INTO categories (name) VALUES (?) RETURNING id, name
`

// Categories --
func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (name) VALUES (?) RETURNING id, name
`

func (q *Queries) CreateCollection(ctx context.Context, name string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, name)
	var i Collection
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photos (name, location, date, description, imagepath, i_height, i_width)
VALUES(?, ?, ?, ?, ?, ?, ?) RETURNING id
`

type CreatePhotoParams struct {
	Name        string
	Location    string
	Date        sql.NullString
	Description sql.NullString
	Imagepath   string
	IHeight     sql.NullString
	IWidth      sql.NullString
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPhoto,
		arg.Name,
		arg.Location,
		arg.Date,
		arg.Description,
		arg.Imagepath,
		arg.IHeight,
		arg.IWidth,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id=?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections 
WHERE id=?
`

func (q *Queries) DeleteCollection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const deletePhoto = `-- name: DeletePhoto :one
DELETE FROM photos
WHERE id = ?
RETURNING imagepath
`

func (q *Queries) DeletePhoto(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, deletePhoto, id)
	var imagepath string
	err := row.Scan(&imagepath)
	return imagepath, err
}

const getAllCollections = `-- name: GetAllCollections :many
SELECT id, name FROM collections
`

func (q *Queries) GetAllCollections(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getAllCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhotos = `-- name: GetAllPhotos :many
SELECT id, name, date, imagepath, i_height, i_width FROM photos
`

type GetAllPhotosRow struct {
	ID        int64
	Name      string
	Date      sql.NullString
	Imagepath string
	IHeight   sql.NullString
	IWidth    sql.NullString
}

func (q *Queries) GetAllPhotos(ctx context.Context) ([]GetAllPhotosRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPhotos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPhotosRow
	for rows.Next() {
		var i GetAllPhotosRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Imagepath,
			&i.IHeight,
			&i.IWidth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionPhotos = `-- name: GetCollectionPhotos :many

SELECT img.id, img.name, img.date, img.imagepath, img.i_height, img.i_width, collec.name, collec.id
    FROM photos AS img
INNER JOIN image_collections AS link ON
    link.photo_id = img.id
INNER JOIN collections AS collec ON
    link.collection_id = collec.id WHERE collec.id=?
`

type GetCollectionPhotosRow struct {
	ID        int64
	Name      string
	Date      sql.NullString
	Imagepath string
	IHeight   sql.NullString
	IWidth    sql.NullString
	Name_2    string
	ID_2      int64
}

// Collections --
func (q *Queries) GetCollectionPhotos(ctx context.Context, id int64) ([]GetCollectionPhotosRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionPhotos, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionPhotosRow
	for rows.Next() {
		var i GetCollectionPhotosRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Imagepath,
			&i.IHeight,
			&i.IWidth,
			&i.Name_2,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPhotoById = `-- name: GetPhotoById :one

SELECT id, name, location, date, imagepath, description, i_height, i_width FROM photos WHERE id = ? LIMIT 1
`

// Photos --
func (q *Queries) GetPhotoById(ctx context.Context, id int64) (Photo, error) {
	row := q.db.QueryRowContext(ctx, getPhotoById, id)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Date,
		&i.Imagepath,
		&i.Description,
		&i.IHeight,
		&i.IWidth,
	)
	return i, err
}

const getPhotoPath = `-- name: GetPhotoPath :one
SELECT imagepath FROM photos WHERE id = ? LIMIT 1
`

func (q *Queries) GetPhotoPath(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPhotoPath, id)
	var imagepath string
	err := row.Scan(&imagepath)
	return imagepath, err
}

const getRandomPhoto = `-- name: GetRandomPhoto :one
SELECT id, name, location, date, imagepath, description, i_height, i_width FROM photos
ORDER BY random() LIMIT 1
`

func (q *Queries) GetRandomPhoto(ctx context.Context) (Photo, error) {
	row := q.db.QueryRowContext(ctx, getRandomPhoto)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Date,
		&i.Imagepath,
		&i.Description,
		&i.IHeight,
		&i.IWidth,
	)
	return i, err
}

const photoIDGetCollections = `-- name: PhotoIDGetCollections :many
SELECT name, id FROM collections
INNER JOIN image_collections AS link ON
    link.collection_id = collections.id WHERE link.photo_id=?
`

type PhotoIDGetCollectionsRow struct {
	Name string
	ID   int64
}

func (q *Queries) PhotoIDGetCollections(ctx context.Context, photoID int64) ([]PhotoIDGetCollectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, photoIDGetCollections, photoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhotoIDGetCollectionsRow
	for rows.Next() {
		var i PhotoIDGetCollectionsRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const photoIntoCollection = `-- name: PhotoIntoCollection :exec
INSERT INTO image_collections (photo_id, collection_id) VALUES (?,?)
`

type PhotoIntoCollectionParams struct {
	PhotoID      int64
	CollectionID int64
}

func (q *Queries) PhotoIntoCollection(ctx context.Context, arg PhotoIntoCollectionParams) error {
	_, err := q.db.ExecContext(ctx, photoIntoCollection, arg.PhotoID, arg.CollectionID)
	return err
}

const updatePhoto = `-- name: UpdatePhoto :exec
UPDATE photos
SET name=?, location=?,
date=?, description=?, imagepath=?, i_height=?, i_width=?
WHERE id = ?
`

type UpdatePhotoParams struct {
	Name        string
	Location    string
	Date        sql.NullString
	Description sql.NullString
	Imagepath   string
	IHeight     sql.NullString
	IWidth      sql.NullString
	ID          int64
}

func (q *Queries) UpdatePhoto(ctx context.Context, arg UpdatePhotoParams) error {
	_, err := q.db.ExecContext(ctx, updatePhoto,
		arg.Name,
		arg.Location,
		arg.Date,
		arg.Description,
		arg.Imagepath,
		arg.IHeight,
		arg.IWidth,
		arg.ID,
	)
	return err
}
